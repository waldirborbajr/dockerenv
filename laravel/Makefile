# Define project name
PROJECT_NAME=omniapi

# Mark targets as phony (not file-based)
.PHONY: up down restart logs artisan composer route install tinker migrate bash prune inspect

# ===============================
# Configura√ß√µes da rede macvlan
# ===============================
HOST_IFACE ?= enp3s0f0          # Interface f√≠sica do host (ex: eth0, enp3s0f0, ens33)
HOST_MACVLAN_IP ?= 192.168.0.19 # IP livre na rede para o host falar com containers
HOST_NETMASK ?= 24              # M√°scara da rede (geralmente /24)
CONTAINER_IP ?= 192.168.0.17    # IP fixo do container na rede macvlan
CONTAINER_PORT ?= 8012          # Porta exposta pelo servi√ßo Laravel

# ===============================
# Alvos principais
# ===============================

up: macvlan-up
	@echo "üîÑ Subindo containers..."
	docker compose up --build --force-recreate
	$(MAKE) test-net

down:
	@echo "üõë Parando containers..."
	docker compose down --rmi all --remove-orphans

restart: down up

logs:
	docker compose logs -f $(PROJECT_NAME)

bash:
	docker compose exec -it $(PROJECT_NAME) bash

ps:
	docker compose ps

artisan:
	docker compose exec $(PROJECT_NAME) php artisan $(cmd)

route:
	docker compose exec $(PROJECT_NAME) php artisan route:list

# ===============================
# Rede host <-> macvlan
# ===============================

macvlan-up:
	@echo "üåê Verificando interface macvlan0 no host..."
	@if ip link show macvlan0 >/dev/null 2>&1; then \
		echo "‚úîÔ∏è Interface macvlan0 j√° existe."; \
	else \
		sudo ip link add macvlan0 link $(HOST_IFACE) type macvlan mode bridge && \
		sudo ip addr add $(strip $(HOST_MACVLAN_IP))/$(strip $(HOST_NETMASK)) dev macvlan0 && \
		sudo ip link set macvlan0 up && \
		echo "‚úÖ Interface macvlan0 criada com IP $(HOST_MACVLAN_ADDR)."; \
	fi

macvlan-down:
	@if ip link show macvlan0 >/dev/null 2>&1; then \
		sudo ip link set macvlan0 down && \
		sudo ip addr del $(strip $(HOST_MACVLAN_IP))/$(strip $(HOST_NETMASK)) dev macvlan0 && \
		sudo ip link delete macvlan0 && \
		echo "‚úÖ Interface macvlan0 removida."; \
	else \
		echo "‚ÑπÔ∏è Interface macvlan0 n√£o existe."; \
	fi

# ===============================
# Testes de conectividade
# ===============================

test-net:
	@echo "üì° Testando conectividade com o container em $(CONTAINER_IP)..."
	@if ping -c 2 $(CONTAINER_IP) >/dev/null 2>&1; then \
		echo "‚úÖ Conectividade OK: host alcan√ßa o container $(CONTAINER_IP)."; \
	else \
		echo "‚ùå Erro: host n√£o consegue alcan√ßar o container $(CONTAINER_IP)."; \
	fi
	@echo "üîç Verificando se o servi√ßo Laravel responde na porta $(CONTAINER_PORT)..."
	@if curl -s -o /dev/null -w "%{http_code}" http://$(CONTAINER_IP):$(CONTAINER_PORT) | grep -q "200"; then \
		echo "‚úÖ Servi√ßo Laravel responde em http://$(CONTAINER_IP):$(CONTAINER_PORT)"; \
	else \
		echo "‚ö†Ô∏è Aviso: servi√ßo Laravel n√£o respondeu na porta $(CONTAINER_PORT)."; \
	fi

prune:
	docker compose down -v --rmi all || true
	docker network rm omni-api-master_laravel-network || true
	docker system prune -af --volumes

inspect:
	docker inspect omniapi --format='{{.State.Health.Status}}'	
